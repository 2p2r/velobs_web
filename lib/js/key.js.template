var TF_key = "xxx" ; // API key pour le serveur de tuiles opencyclemap de thunderforest (documentation ici : http://thunderforest.com/docs/apikeys/) dans le cas où ce serveur est utilisé (cf ci-dessous dans la définition des layers)
var LOAD_ALL_OBSERVATIONS_DEFAULT = false; // au premier accès à l'interface publique : charge toutes les observations ou non

function getCookie(sName) {
        var cookContent = document.cookie, cookEnd, i, j;
        var sName = sName + "=";
 
        for (i=0, c=cookContent.length; i<c; i++) {
                j = i + sName.length;
                if (cookContent.substring(i, j) == sName) {
                        cookEnd = cookContent.indexOf(";", j);
                        if (cookEnd == -1) {
                                cookEnd = cookContent.length;
                        }
                        return decodeURIComponent(cookContent.substring(j, cookEnd));
                }
        }       
        return null;
}

//Surcharge les variables de translation_fr.js et translation_en.js
//ajouter ici les variables des fichiers translation_fr.js et translation_en.js que vous voulez remplacer sans les perde lors d'une prochaine mise à jour
//T_header_main = 'Une entête spécifique pour mon instance'; //texte affiché dans l'entête de l'interface publique


//Définition des cartes à afficher dans l'interface pour affichage des observations en fonction des catégories sélectionnées
//1 : définir le layer
//2 : ajouter une entrée au tableau mapLayersArray contenant le layer ci-dessus
//ce tableau est utilisé pour afficher des layers sélectionnables dans l'interface
//Attention : tous les layers définis ici sont chargés sur l'interface, pouvant engendrés un trafic réseau non négligeable
var mapnik = new OpenLayers.Layer.OSM("OpenStreetMap Mapnik", "https://tile.openstreetmap.org/${z}/${x}/${y}.png",
        {
                'sphericalMercator': true,
                isBaseLayer: true,
                'attribution': '<a href="http://www.openstreetmap.org" target="_blank">OpenStreetMap</a>'
        }
);
var osmcyclemap = new OpenLayers.Layer.OSM("OSM Cycle Map",
        ['https://tile.thunderforest.com/cycle/${z}/${x}/${y}.png?apikey='+ TF_key],
    {
        'sphericalMercator': true,
        isBaseLayer: true,
        'attribution': 'Maps © <a href="http://www.thunderforest.com/" target="_blank">Thunderforest</a>, Data © <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap contributors</a>'
    }
);
//la carte affichée par défaut est la première
var mapLayersArray = [
        [0, 'Mapnik',mapnik],
        //[1, 'OpenCycleMap', osmcyclemap]
];

//Création de la carte utilisée dans la vue de modification d'une observation dans l'interface d'administration
//peut-être la même définition qu'une carte ci-dessus, mais ne pas affecter une variable de carte déjà existante sinon une des 2 cartes ne s'affichera pas
var adminMapForPoi = new OpenLayers.Layer.OSM("OpenStreetMap Mapnik", "https://tile.openstreetmap.org/${z}/${x}/${y}.png",
        {
                'sphericalMercator': true,
                isBaseLayer: true,
                'attribution': '<a href="http://www.openstreetmap.org" target="_blank">OpenStreetMap</a>'
        }
);

//variables used in the render of observations, grouped together in clusters if there are more than ClusterStrategyNumberOfGroupedObservations observations close to each other of at most ClusterStrategyDistance pixels
var ClusterStrategyNumberOfGroupedObservations = 6;
var ClusterStrategyDistance = 30;


//Color Management
//pre-defined colors usable to link the status with. The color linked with a status is used to display the statistics and for the shadow of icons of the corresponding observations
//to add a new color colorX oin this array
//copy this array in key.js
//the text of the statisitics for the corresponding status will be given the css "color:colorX", so be sure that colorX is well known by the browsers
//add the colorX in the array
//make sure to add a png image for the corresponding shadow shadowHover_colorX.png in the folder resources/icon

//Be aware that an update of velobs will not keep the png files you added in resources/icon, you will have to copy them manually. Feel free to add your new colors in the velobs project on github (https://github.com/2p2r/velobs_web)
var predefinedColorsForStatus = [['Vert','green'],['Noir','black'],['Rouge','red'],['Bleu','blue'],['Marron','brown'],['Violet','purple']];


//fields to inactivate for each role (have a look at the INSTALL.md file which lists all the ids usable in these arrays
var arrayComponentsToDisableRole1Admin = ["latitude","longitude","emailPOIField","StatusPOIField","RespComcomPOIField", "RespPolePOIField","TraitePolePOIField","TransmissionPolePOIField"];
var arrayComponentsToDisableRole2CommunauteCommunes = ["RespPolePOIField","latitude","longitude","emailPOIField","sendMailButton","SubCategoryPOIField", "DescPOIField", "PropPOIField", "RuePOIField", "ObsPOIField", "NumPOIField","PrioritePOIField","CommentFinalPOIField","ModerationPOIField","DisplayPOIField"];
var arrayComponentsToDisableRole3PoleTechnique = ["latitude","longitude","emailPOIField","sendMailButton","SubCategoryPOIField", "CommunePOIField", "PolePOIField", "RespComcomPOIField", "DescPOIField", "PropPOIField", "RuePOIField", "ObsPOIField", "NumPOIField", "PrioritePOIField","CommentFinalPOIField","ModerationPOIField","DisplayPOIField"];
var arrayComponentsToDisableRole4Moderateur = ["latitude","longitude","emailPOIField","StatusPOIField","RespComcomPOIField","RespPolePOIField","TraitePolePOIField","TransmissionPolePOIField"];

//Allow to get the street of the observation given by the user while submitting a new observation
var activateReverseGeocoding = true;